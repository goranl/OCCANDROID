--- ros/src/OSD/OSD_Csemaphore.c	2012-11-12 11:41:17.000000000 +0100
+++ ros_patch/src/OSD/OSD_Csemaphore.c	2013-03-28 19:19:15.000000000 +0100
@@ -55,7 +55,7 @@
 #define CLUSTER_NUMBER 4 
 #define SIGUSER SIGUSR1-1
 
-static struct sembuf event_flag ;
+//static struct sembuf event_flag ;
 	 
 static void osd_signal_(int); 
 int osd_getkey(char *);
@@ -85,7 +85,7 @@ create_semaphore(char *name)
 	CREATE a semaphore cluster of 32 events
 
 =========================================================*/
-{
+{ /*
 int status ;
 
 
@@ -98,8 +98,10 @@ int status ;
 
 	status = semget(key,CLUSTER_NUMBER,0750 + IPC_CREAT) ;
 
-	if( status < 0 ) return (0) ;  /* semget failed */
+	if( status < 0 ) return (0) ;  // semget failed 
         return status ;
+  */
+  return 0;
 }
 
 
@@ -110,7 +112,7 @@ open_semaphore(char *name)
 	OPEN a semaphore cluster 
 
 =========================================================================*/
-{
+{ /*
 int status ;
 
 
@@ -120,8 +122,10 @@ int status ;
         key = (key_t) osd_getkey (name);
 	status = semget(key,0,0) ;
 
-	if( status < 0 ) return (0) ;  /* semget failed */
+	if( status < 0 ) return (0) ;  // semget failed 
          else   return status;
+  */
+  return 0;
 }
 
 
@@ -133,9 +137,9 @@ lock_semaphore(int *semid, int *event)
 	WAIT & LOCK the semaphore attached to the cluster
 
 ====================================================*/
-{
+{/*
   int status ;
-
+  
   event_flag.sem_num = *event ;
   event_flag.sem_op  = -1 ;
   event_flag.sem_flg = SEM_UNDO;
@@ -152,6 +156,8 @@ lock_semaphore(int *semid, int *event)
     return (0) ;
   else
     return (1) ;
+ */
+    return 0;
 }
 
 
@@ -162,7 +168,7 @@ free_semaphore(int *semid, int *event)
 	FREE the semaphore attached to the cluster
 
 ====================================================*/
-{
+{/*
   int status ;
   int zero_value = 0;
   
@@ -182,11 +188,13 @@ free_semaphore(int *semid, int *event)
     status = semop(*semid,&event_flag,1) ;
 #endif
   else return 0;
-
+  
    if( status < 0 )
     return (0) ;
   else
     return (1) ;
+*/ 
+    return 0;
 }
 
 
@@ -198,7 +206,7 @@ reset_semaphore(int *semid, int *event)
       RESET semaphore to initial state
 
 ======================================================*/
-{
+{/*
  int status;
  int zero_value=0;
 
@@ -207,9 +215,11 @@ reset_semaphore(int *semid, int *event)
 #else
  status = semctl(*semid,*event,SETVAL,&zero_value);
 #endif
+
  if (status < 0) return(0);
             else return(1);
-
+ */
+ return 0;
 }
 
 
@@ -220,7 +230,7 @@ set_semaphore(int *semid, int *event, in
       SET semaphore counter to a fixed value
 
 ====================================================*/
-{
+{/*
  int status;
 
 #ifdef SEMCTL_NO_REFERENCE
@@ -228,9 +238,11 @@ set_semaphore(int *semid, int *event, in
 #else
  status = semctl((*semid),*event,SETVAL,&value);
 #endif
+
  if (status < 0) return(0);
             else return(1);
-
+*/
+return 0;
 }
 
 
@@ -241,7 +253,7 @@ get_semaphore(int *semid, int *event, in
       GET semaphore counter value
  
 ==========================================================================*/
-{
+{/*
  int status;
  
 #ifdef SEMCTL_NO_REFERENCE
@@ -249,10 +261,11 @@ get_semaphore(int *semid, int *event, in
 #else
  status = semctl((*semid),*event,GETVAL,&value);
 #endif
-
+ 
  if (status < 0) return(0);
             else return(1);
- 
+ */
+ return 0;
 }
 
 
@@ -264,14 +277,16 @@ remove_semaphore(int *semid, char *name)
           CLOSE semaphore attached to cluster
 
 =============================================================================*/
-{
- int status;
-
-/*  status = semctl(*semid,IPC_RMID,NULL);*/
-  status = semctl(*semid,IPC_RMID,0);
-  if (status < 0) return 0;
+{/*
+ int status=0;
+ 
+//  status = semctl(*semid,IPC_RMID,NULL);
+//  status = semctl(*semid,IPC_RMID,0);   
+   
+if (status < 0) return 0;
              else return 1;
-
+*/
+  return 0;
 }
 
 
